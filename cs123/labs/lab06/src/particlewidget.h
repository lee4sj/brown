#ifndef PARTICLEWIDGET_H
#define PARTICLEWIDGET_H

#include "common.h"

#include <QGLWidget>
#include <QGLShader>

class QFile;
class ParticleEmitter;

class ParticleWidget : public QGLWidget
{
    Q_OBJECT

public:
    ParticleWidget(QWidget *parent = 0);
    ~ParticleWidget();

    ParticleEmitter *emitter() { return m_emitter; }

protected:
    /**
      * Applied the current camera position and orientation to the OpenGL modelview and projection matrices.
      * You should not need to modify this.
      */
    void updateCamera();
    /**
      * You need to fill this in.
      *
      * Loads the image at the given path and copies its data into an OpenGL texture.
      * @return The unique ID of the texture generated by this function.
      */
    GLuint loadTexture(const QString& path);

    /**
      * You need to fill this in.
      *
      * Called when this object is first created, to set the initial OpenGL state
      * required by this lab. Specify your render settings here.
      */
    void initializeGL();
    /**
      * You need to fill this in
      *
      * Called several times per second to draw your particlescene. This is where
      * all of your OpenGL render calls should occur.
      */
    void paintGL();
    /**
      * Resizes the viewport so the scene doesn't look distorted when the window is resized.
      * You should not need to modify this.
      */
    void resizeGL(int w, int h);

    /** The particle emitter containing the particles to draw */
    ParticleEmitter *m_emitter;
    /** Controls when the scene is redrawn */
    QTimer *m_timer;
    /** Contains the camera's current position and orientation */
    Camera *m_camera;

protected slots:
    void mouseDragEvent(QMouseEvent *event){ Q_UNUSED(event); }
    void redraw();

signals:
    void _glInit();
    void _mouseDrag(QMouseEvent *);
};

#endif // PARTICLEWIDGET_H

